#!/usr/bin/env python

from time import sleep # only needed for example code at bottom
import hashlib, base64
from binascii import hexlify # debug output
import sys
from Crypto import Random                                       #
from Crypto.Cipher import AES                                   # These are used for encrypting/decrypting
from Crypto.Hash import SHA256                                  #
from Crypto.Util.number import long_to_bytes, bytes_to_long     #

AES_MODE = AES.MODE_CBC
IVEC_SIZE = 16
PSIZE = 16

pad = lambda s: s + (PSIZE - len(s) % PSIZE) * chr(PSIZE - len(s) % PSIZE)
unpad = lambda s: s[0:-ord(s[-1])]

def pad(s):
    padsize = PSIZE - len(s) % PSIZE
    return (s + padsize * chr(padsize)).encode('utf-8')
    #return s + (PSIZE - len(s) % PSIZE) * chr(PSIZE - len(s) % PSIZE)

def unpad(s):
    s = s.decode('utf-8')
    offset = ord(s[-1])
    return s[:-offset]
    #return s[0:-ord(s[-1])]

def encrypt(plaintext, key): # Key should be a gen_key after public keys are shared.
    plaintext = pad(plaintext) # Pad plaintext for AES CBC MODE requiring 16 byte chunks
    iv = Random.new().read(IVEC_SIZE) # Create IV
    encryptor = AES.new(key, AES_MODE, iv) # Make Encryptor with key, CBC mode, IV
    enc_text = encryptor.encrypt(plaintext) # Actually encrypting
    sendme = iv + enc_text
    #sendme = base64.b64encode(iv + enc_text) # encoding in Base64 so we have no character conflicts, including the iv to from
    return iv + enc_text
    
def decrypt(ciphertext, key): # Key should be a gen_key after public keys are shared.
    #enc = base64.b64decode(ciphertext) # Decoding the ciphertext in Base64 to prevent character encoding issues. This isn't required.
    enc = ciphertext
    iv = enc[:IVEC_SIZE] # Making the IV, which is from 0 to IVEC_SIZE (16)
    enc = enc[IVEC_SIZE:]
    decryptor = AES.new(key, AES_MODE, iv) # Decrytor
    plaintext = decryptor.decrypt(enc) # Decrypting the ciphertext , starting from IVEC_SIZE all the way to the end.
    #enc = enc.decode() # Decoding, because this is sent through a socket it will be a byte object
    plaintext = unpad(plaintext) # Stripping the padding off the end
    return plaintext


try:
    import ssl
    random_func = ssl.RAND_bytes
    random_provider = "Python SSL"
except (AttributeError, ImportError):
    import OpenSSL
    random_func = OpenSSL.rand.bytes
    random_provider = "OpenSSL"

class DiffieHellman(object):

    def __init__(self, generator=2, group=17, keyLength=540):
        min_keyLength = 180
        default_keyLength = 540

        default_generator = 2
        valid_generators = [ 2, 3, 5, 7 ]

        if(generator not in valid_generators):
            print("Error: Invalid generator. Using default")
            self.generator = default_generator
        else:
            self.generator = generator

        self.prime = self.getPrime(group)

        self.privateKey = self.genPrivateKey(keyLength)
        self.publicKey = self.genPublicKey()


    def getPrime(self, group=17):
        """
        Given group num, return prime.
        """
        default_group = 17

        primes = {
		5:  0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF,
		14: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF,
		15: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF,
		16: 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF,
		17: 0x
		18: 0x
        }

        if group in primes.keys():
            return primes[group]
        else:
            print("Error: No prime with group %i. Using default" % group)
            return primes[default_group]

    def genRandom(self, bits):
        """
        Generate random num with specified num of bits
        """
        _rand = 0
        _bytes = bits // 8 + 8

        hello = 0

        while(_rand.bit_length() < bits):
            try:
                # Python 3
                # Generate random byte by length of _bytes by iterating until _rand.bit_length = bits
                _rand = int.from_bytes(random_func(_bytes), byteorder='big')
            except:
                # Python 2
                _rand = int(OpenSSL.rand.bytes(_bytes).encode('hex'), 16)

        return _rand

    def genPrivateKey(self, bits):
        return self.genRandom(bits)
    
    def genPublicKey(self):
        return pow(self.generator, self.privateKey, self.prime)

    def checkPublicKey(self, otherKey):
        if(otherKey > 2 and otherKey < self.prime - 1):
            if( pow( otherKey, ( self.prime - 1 )//2, self.prime ) == 1 ):
                return True
        return False

    def genSecret(self, privateKey, otherKey):
        if(self.checkPublicKey(otherKey) == True):
            sharedSecret = pow(otherKey, privateKey, self.prime)
            return sharedSecret
        else:
            raise Exception("Invalid public key!")

    def genKey(self, otherKey):
        self.sharedSecret = self.genSecret(self.privateKey, otherKey)

        # Convert the shared secret (int) into an array of bytes in network order
        # Otherwise hashlib can't hash it
        try:
            _sharedSecretBytes = self.sharedSecret.to_bytes(self.sharedSecret.bit_length() // 8 + 1, byteorder="big")
        except AttributeError:
            _sharedSecretBytes = str(self.sharedSecret)

        s = hashlib.sha256()
        s.update(bytes(_sharedSecretBytes))
        self.key = s.digest()

    def getKey(self):
        return self.key
    
    #def showParams(self):
	#    #"""
	#	#Show the parameters of the Diffie Hellman agreement.
	#	#"""
	#    print("Parameters:")
	#	print("Prime[{0}]: {1}".format(self.prime.bit_length(), self.prime))
	#	print("Generator[{0}]: {1}\n".format(self.generator.bit_length(), self.generator))
	#	print("Private key[{0}]: {1}\n".format(self.privateKey.bit_length(), self.privateKey))
	#	print("Public key[{0}]: {1}".format(self.publicKey.bit_length(), self.publicKey))
    #
	#def showResults(self):
	#	#"""
	#	#Show the results of a Diffie-Hellman exchange.
	#	#"""
	#	print("Results:")
	#	print("Shared secret[{0}]: {1}".format(self.sharedSecret.bit_length(),
	#		self.sharedSecret))
    #    print("Shared key[{0}]: {1}".format(len(self.key), hexlify(self.key)))

#if __name__=="__main__":
#    while True:
#        try:
#            a = DiffieHellman()
#            b = DiffieHellman()
#
#            a.genKey(b.publicKey)
#            b.genKey(a.publicKey)
#
#            if(a.getKey() == b.getKey()):
#                print("Shared keys match.")
#                print("Key:", hexlify(a.key))
#            else:
#                print("Shared secrets didn't match!")
#                print("Shared secret A: ", a.genSecret(b.publicKey))
#                print("Shared secret B: ", b.genSecret(b.publicKey))
#
#            del a
#            del b
#        except KeyboardInterrupt:
#            print("User Interrupted")
#            del a
#            del b
#            sleep(5)
#            raise SystemExit